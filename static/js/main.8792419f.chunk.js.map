{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Contact/Contact.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","contacts","addToContactList","handleFormSubmit","event","preventDefault","state","find","contact","name","alert","console","log","filter","id","uuidv","number","handleInputChange","currentTarget","setState","value","onSubmit","this","className","style","label","input","type","pattern","title","required","onChange","Component","Filter","onChangeFilterInput","Contact","deleteContactFromList","item","onClick","ContactList","list","map","App","prevState","handleInputFilterChange","filterContactsByName","toUpperCase","includes","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8792419f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__3KYGH\",\"input\":\"ContactForm_input__ds3Uc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Contact_item__3BNwa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3Ru5G\"};","import { Component } from \"react\";\nimport { v4 as uuidv } from \"uuid\";\nimport propTypes from \"prop-types\";\nimport style from \"./ContactForm.module.css\";\n\nclass ContactForm extends Component {\n  constructor({ contacts, addToContactList }) {\n    super();\n\n    this.state = {\n      name: \"\",\n      number: \"\",\n      contacts: contacts,\n    };\n\n    this.addToContactList = addToContactList;\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    if (\n      this.state.contacts.find((contact) => contact.name === this.state.name)\n    ) {\n      return alert(`${this.state.name} is already in contacts!`);\n    }\n\n    console.log(this.state.filter);\n\n    this.addToContactList({\n      id: uuidv(),\n      name: this.state.name,\n      number: this.state.number,\n    });\n  };\n\n  handleInputChange = (event) => {\n    if (event.currentTarget.name === \"name\") {\n      this.setState({\n        name: event.currentTarget.value,\n      });\n\n      return;\n    }\n\n    this.setState({\n      number: event.currentTarget.value,\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <label className={style.label}>\n          <span>Name</span>\n          <input\n            className={style.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <label className={style.label}>\n          <span>Number</span>\n          <input\n            className={style.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.shape({\n      name: propTypes.string,\n      number: propTypes.string,\n    })\n  ),\n  addToContactList: propTypes.func,\n};\n\nexport default ContactForm;\n","import propTypes from \"prop-types\";\n\nfunction Filter({ onChangeFilterInput }) {\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input type=\"text\" onChange={onChangeFilterInput}></input>\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  onChangeFilterInput: propTypes.func,\n};\n\nexport default Filter;\n","import propTypes from \"prop-types\";\nimport style from \"./Contact.module.css\";\n\nfunction Contact({ contact, deleteContactFromList }) {\n  return (\n    <li className={style.item}>\n      {contact.name}: {contact.number}{\" \"}\n      <button type=\"button\" id={contact.id} onClick={deleteContactFromList}>\n        Удалить\n      </button>\n    </li>\n  );\n}\n\nContact.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.shape({\n      name: propTypes.string,\n      number: propTypes.string,\n    })\n  ),\n  deleteContactFromList: propTypes.func,\n};\n\nexport default Contact;\n","import Contact from \"../Contact/Contact\";\nimport propTypes from \"prop-types\";\nimport style from \"./ContactList.module.css\";\n\nfunction ContactList({ contacts, deleteContactFromList }) {\n  return (\n    <ul className={style.list}>\n      {contacts.map((contact) => {\n        return (\n          <Contact\n            contact={contact}\n            key={contact.id}\n            deleteContactFromList={deleteContactFromList}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.shape({\n      name: propTypes.string,\n      number: propTypes.string,\n    })\n  ),\n  deleteContactFromList: propTypes.func,\n};\n\nexport default ContactList;\n","import \"./App.css\";\nimport { Component } from \"react\";\n\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  addToContactList = (contact) => {\n    return this.setState((prevState) => {\n      return {\n        contacts: [...prevState.contacts, contact],\n      };\n    });\n  };\n\n  handleInputFilterChange = (event) => {\n    this.setState({\n      filter: event.currentTarget.value,\n    });\n  };\n\n  filterContactsByName = () => {\n    return this.state.contacts.filter((contact) =>\n      contact.name.toUpperCase().includes(this.state.filter.toUpperCase())\n    );\n  };\n\n  deleteContactFromList = (event) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter(\n          (contact) => contact.id !== event.target.id\n        ),\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm\n          contacts={this.state.contacts}\n          addToContactList={this.addToContactList}\n        />\n        <h2>Contacts</h2>\n        <Filter onChangeFilterInput={this.handleInputFilterChange} />\n        <ContactList\n          contacts={this.filterContactsByName()}\n          deleteContactFromList={this.deleteContactFromList}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}